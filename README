NAME
    POE::Component::IRC::Plugin::Validator::HTML - access HTML validator
    from IRC

SYNOPSIS
        use strict;
        use warnings;

        use POE qw(Component::IRC  Component::IRC::Plugin::Validator::HTML);

        my $irc = POE::Component::IRC->spawn(
            nick        => 'ValidatorBot',
            server      => 'irc.freenode.net',
            port        => 6667,
            ircname     => 'Validator Bot',
        );

        POE::Session->create(
            package_states => [
                main => [ qw(_start irc_001) ],
            ],
        );

        $poe_kernel->run;

        sub _start {
            $irc->yield( register => 'all' );

            $irc->plugin_add(
                'ValidatorHTML' =>
                    POE::Component::IRC::Plugin::Validator::HTML->new
            );

            $irc->yield( connect => {} );
        }

        sub irc_001 {
            $_[KERNEL]->post( $_[SENDER] => join => '#zofbot' );
        }

        <Zoffix> ValidatorBot, validate http://zoffix.com
        <ValidatorBot> Valid ( http://validator.w3.org/check?uri=http%3A%2F%2Fzoffix.com&doctype=Inline&group=0&No200=1&verbose=1 )
        <Zoffix> ValidatorBot, validate http://google.ca
        <ValidatorBot> Invalid (49 errors) See: http://validator.w3.org/check?uri=http%3A%2F%2Fgoogle.ca&doctype=Inline&group=0&No200=1&verbose=1

DESCRIPTION
    This module is a POE::Component::IRC plugin which uses
    POE::Component::IRC::Plugin for its base. It provides interface to W3C
    HTML validator. It accepts input from public channel events, "/notice"
    messages as well as "/msg" (private messages); although that can be
    configured at will.

CONSTRUCTOR
  new
        # plain and simple
        $irc->plugin_add(
            'ValidatorHTML' => POE::Component::IRC::Plugin::Validator::HTML->new
        );

        # juicy flavor
        $irc->plugin_add(
            'ValidatorHTML' =>
                POE::Component::IRC::Plugin::Validator::HTML->new(
                    auto             => 1,
                    response_event   => 'irc_validator_html',
                    banned           => [ qr/aol\.com$/i ],
                    root             => [ qr/mah.net$/i ],
                    addressed        => 1,
                    trigger          => qr/^validate\s+(?=\S)/i,
                    listen_for_input => [ qw(public notice privmsg) ],
                    eat              => 1,
                    debug            => 0,
                )
        );

    The "new()" method constructs and returns a new
    "POE::Component::IRC::Plugin::Validator::HTML" object suitable to be fed
    to POE::Component::IRC's "plugin_add" method. The constructor takes a
    few arguments, but *all of them are optional*. The possible
    arguments/values are as follows:

   auto
        ->new( auto => 0 );

    Optional. Takes either true or false values, specifies whether or not
    the plugin should auto respond to requests. When the "auto" argument is
    set to a true value plugin will respond to the requesting person with
    the results automatically. When the "auto" argument is set to a false
    value plugin will not respond and you will have to listen to the events
    emited by the plugin to retrieve the results (see EMITED EVENTS section
    and "response_event" argument for details). Defaults to: 1.

   response_event
        ->new( response_event => 'event_name_to_recieve_results' );

    Optional. Takes a scalar string specifying the name of the event to emit
    when the results of the request are ready. See EMITED EVENTS section for
    more information. Defaults to: "irc_validator_html"

   banned
        ->new( banned => [ qr/aol\.com$/i ] );

    Optional. Takes an arrayref of regexes as a value. If the usermask of
    the person (or thing) making the request matches any of the regexes
    listed in the "banned" arrayref, plugin will ignore the request.
    Defaults to: "[]" (no bans are set).

   root
        ->new( root => [ qr/\Qjust.me.and.my.friend.net\E$/i ] );

    Optional. As opposed to "banned" argument, the "root" argument allows
    access only to people whose usermasks match any of the regexen you
    specify in the arrayref the argument takes as a value. By default: it is
    not specified. Note: as opposed to "banned" specifying an empty arrayref
    to "root" argument will restrict access to everyone.

   trigger
        ->new( trigger => qr/^validate\s+(?=\S)/i );

    Optional. Takes a regex as an argument. Messages matching this regex
    will be considered as requests. See also addressed option below which is
    enabled by default. Note: the trigger will be removed from the message,
    therefore make sure your trigger doesn't match the actual data that
    needs to be processed. Defaults to: "qr/^validate\s+(?=\S)/i"

   addressed
        ->new( addressed => 1 );

    Optional. Takes either true or false values. When set to a true value
    all the public messages must be *addressed to the bot*. In other words,
    if your bot's nickname is "Nick" and your trigger is "qr/^trig\s+/" you
    would make the request by saying "Nick, trig validate
    http://zoffix.com". When addressed mode is turned on, the bot's
    nickname, including any whitespace and common punctuation character will
    be removed before matching the "trigger" (see above). When "addressed"
    argument it set to a false value, public messages will only have to
    match "trigger" regex in order to make a request. Note: this argument
    has no effect on "/notice" and "/msg" requests. Defaults to: 1

   listen_for_input
        ->new( listen_for_input => [ qw(public  notice  privmsg) ] );

    Optional. Takes an arrayref as a value which can contain any of the
    three elements, namely "public", "notice" and "privmsg" which indicate
    which kind of input plugin should respond to. When the arrayref contains
    "public" element, plugin will respond to requests sent from messages in
    public channels (see "addressed" argument above for specifics). When the
    arrayref contains "notice" element plugin will respond to requests sent
    to it via "/notice" messages. When the arrayref contains "privmsg"
    element, the plugin will respond to requests sent to it via "/msg"
    (private messages). You can specify any of these. In other words,
    setting "( listen_for_input =" [ qr(notice privmsg) ] )> will enable
    functionality only via "/notice" and "/msg" messages. Defaults to: "[
    qw(public notice privmsg) ]"

   eat
        ->new( eat => 0 );

    Optional. If set to a false value plugin will return a "PCI_EAT_NONE"
    after responding. If eat is set to a true value, plugin will return a
    "PCI_EAT_ALL" after responding. See POE::Component::IRC::Plugin
    documentation for more information if you are interested. Defaults to: 1

   debug
        ->new( debug => 1 );

    Optional. Takes either a true or false value. When "debug" argument is
    set to a true value some debugging information will be printed out. When
    "debug" argument is set to a false value no debug info will be printed.
    Defaults to: 0.

EMITED EVENTS
  response_event
        $VAR1 = {
              'errors' => [
                            {
                                     'msg' => 'no document type declaration; implying "<!DOCTYPE HTML SYSTEM>"',
                                     'col' => '0',
                                     'line' => '1'
                              },
                            # and more and more of these
              ],
              'in' => 'http://google.ca',
              'num_errors' => '46',
              'validator_uri' => 'http://validator.w3.org/check',
              'type' => 'uri',
              'is_valid' => 0,
              'uri_to_results' => bless( do{\(my $o = 'http://validator.w3.org/check?uri=http%3A%2F%2Fgoogle.ca&doctype=Inline&group=0&No200=1&verbose=1')}, 'URI::http' ),
              'channel' => '#zofbot',
              'type' => 'public',
              'who' => 'Zoffix__!n=Zoffix@unaffiliated/zoffix',
              'message' => 'ValidatorBot, validate http://zoffix.com',
            };


        $VAR1 = {
              'options' => {
                             'http_timeout' => 2,
                             'validator_uri' => 'http://somewhereesle.com'
                           },
              '_user_defined' => 'something',
              'in' => 'http://zoffix.com',
              'validator_error' => 'Could not contact validator',
              'type' => 'uri',
              'validator_uri' => 'http://somewhereesle.com'
              'uri_to_results' => bless( do{\(my $o = 'http://http://somewhereesle.com/?uri=http%3A%2F%2Fgoogle.ca&doctype=Inline&group=0&No200=1&verbose=1')}, 'URI::http' ),
              'channel' => '#zofbot',
              'type' => 'public',
              'who' => 'Zoffix__!n=Zoffix@unaffiliated/zoffix',
              'message' => 'ValidatorBot, validate http://zoffix.com',
        };

    The event handler set up to handle the event, name of which you've
    specified in the "response_event" argument to the constructor (it
    defaults to "irc_validator_html") will recieve input every time
    validation request is completed. The input will come in in $_[ARG0] in a
    form of a hashref. The the keys are the same as the return of
    POE::Component::WebService::Validator::HTML::W3C "validate()"
    method/event with additional keys which are as follows:

   uri_to_results
    'uri_to_results' => bless( do{\(my $o =
    'http://validator.w3.org/check?uri=http%3A%2F%2Fgoogle.ca&doctype=Inline
    &group=0&No200=1&verbose=1')}, 'URI::http' ),

    Will contain a URI object pointing to the results of validation.

   who
        { 'who' => 'Zoffix!n=Zoffix@unaffiliated/zoffix' }

    The "who" key will contain the usermask of the user who requested
    validation.

   type
        { 'type' => 'public' }

    The "type" key will contain the "type" of the message sent by the
    requestor. The possible values are: "public", "notice" and "privmsg"
    indicating that request was requested in public channel, via "/notice"
    and via "/msg" (private message) respectively.

   channel
        { 'channel' => '#zofbot' }

    The "channel" key will contain the name of the channel from which the
    request came from. This will only make sense when "type" key (see above)
    contains "public".

   message
        { 'message' => 'ValidatorBot, validate http://zoffix.com' }

AUTHOR
    Zoffix Znet, "<zoffix at cpan.org>" (<http://zoffix.com>,
    <http://haslayout.net>)

BUGS
    Please report any bugs or feature requests to
    "bug-poe-component-irc-plugin-validator-html at rt.cpan.org", or through
    the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=POE-Component-IRC-Plugin
    -Validator-HTML>. I will be notified, and then you'll automatically be
    notified of progress on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc POE::Component::IRC::Plugin::Validator::HTML

    You can also look for information at:

    *   RT: CPAN's request tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=POE-Component-IRC-Plugin-V
        alidator-HTML>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/POE-Component-IRC-Plugin-Validator-HTML>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/POE-Component-IRC-Plugin-Validator-HT
        ML>

    *   Search CPAN

        <http://search.cpan.org/dist/POE-Component-IRC-Plugin-Validator-HTML
        >

COPYRIGHT & LICENSE
    Copyright 2008 Zoffix Znet, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

